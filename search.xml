<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>于是开始写第一篇博客</title>
    <url>/2021/04/17/my-first-blog/</url>
    <content><![CDATA[<p>从零开始的学习生活</p>
<span id="more"></span>!
<h1 id="以下是代码测试"><a href="#以下是代码测试" class="headerlink" title="以下是代码测试"></a>以下是代码测试</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">print(&quot;Hello</span> <span class="string">World&quot;);</span></span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>操作系统笔记（绝赞更新中）</title>
    <url>/2021/04/18/OS-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人操作系统笔记整理，欢迎参考，时不时更新。  </p>
<span id="more"></span>

<h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章  操作系统引论"></a>第一章  操作系统引论</h1><h2 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h2><h3 id="一、计算机系统的组成"><a href="#一、计算机系统的组成" class="headerlink" title="一、计算机系统的组成"></a>一、计算机系统的组成</h3><p>&ensp;&ensp;&ensp;&ensp;<strong>1．计算机系统是由硬件和软件两部分组成</strong></p>
<p><img src="/2021/04/18/OS-1/gainian.jpg" alt="计算机系统的组成">  </p>
<p>&ensp;&ensp;&ensp;&ensp;硬件部分：构成了系统本身和用户作业赖以活动的物质基础和环境。<br>&ensp;&ensp;&ensp;&ensp;系统软件：主要管理计算机系统本身的操作；<br>&ensp;&ensp;&ensp;&ensp;应用软件: 主要解决用户的问题。  </p>
<p>&ensp;&ensp;&ensp;&ensp;<strong>2．操作系统在计算机系统中的地位和作用</strong> </p>
<p><img src="/2021/04/18/OS-1/diwei.png" alt="操作系统的地位">  </p>
<p>&ensp;&ensp;&ensp;&ensp;<strong>计算机的层次结构</strong></p>
<p><img src="/2021/04/18/OS-1/%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="层次结构">  </p>
<p>&ensp;&ensp;&ensp;&ensp;操作系统的地位：是系统硬件之上的第一层软件，为其他软件提供单向支撑作用。<br>&ensp;&ensp;&ensp;&ensp;裸机：没有任何软件支持的计算机。</p>
<p>&ensp;&ensp;&ensp;&ensp;<strong>3．操作系统的定义</strong>  </p>
<ul>
<li>计算机系统中的一个大型的<font color="#FF0000">系统软件</font>   </li>
<li>它用来<font color="#FF0000">管理和控制</font>计算机系统中的全部软、硬件<font color="#FF0000">资源</font>  </li>
<li>合理地组织计算机的工作流程  </li>
<li>为用户应用程序的运行提供一个<font color="#FF0000">友好的界面和良好的工作环境。</font>  </li>
</ul>
<h2 id="操作系统的目标和作用"><a href="#操作系统的目标和作用" class="headerlink" title="操作系统的目标和作用"></a>操作系统的目标和作用</h2><h3 id="一、操作系统的目标"><a href="#一、操作系统的目标" class="headerlink" title="一、操作系统的目标"></a>一、操作系统的目标</h3><ul>
<li>有效性(系统管理人员的观点)：合理地组织计算机系统的工作流程，管理和分配各种硬件和软件资源，提高计算机系统资源利用率和系统吞吐量。</li>
<li>方便性(用户的观点)：提供良好的、一致的用户接口。无需了解许多有关硬件和系统软件的细节。</li>
<li>可扩充性：指OS应采用层次化、模块化结构，给计算机系统的功能的扩展提供开放式的支撑平台。</li>
<li>开放性：指系统遵循世界标准规范，特别是遵循开放系统互联0SI国际标准。</li>
</ul>
<h3 id="二、操作系统的作用"><a href="#二、操作系统的作用" class="headerlink" title="二、操作系统的作用"></a>二、操作系统的作用</h3><p>&ensp;&ensp;&ensp;&ensp;<strong>1.OS作为用户与计算机硬件系统之间的接口</strong>  </p>
<p>&ensp;&ensp;&ensp;&ensp;OS处于用户与计算机硬件系统之间，用户通过OS来使用计算机系统。<br><img src="/2021/04/18/OS-1/%E6%8E%A5%E5%8F%A3%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="OS作为接口示意图"><br>&ensp;&ensp;&ensp;&ensp;使用方式：<br>&ensp;&ensp;&ensp;&ensp;（1）命令方式。这是指由OS提供了一组联机命令(语言)， 用户可通过键盘输入有关命令，来直接操纵计算机系统<br>&ensp;&ensp;&ensp;&ensp;（2）系统调用方式。OS提供了一组系统调用，用户可在自己的应用程序中通过相应的系统调用，来操纵计算机。<br>&ensp;&ensp;&ensp;&ensp;（3）图形、窗口方式。用户通过屏幕上的窗口和图标来操纵计算机系统和运行自己的程序。<br>&ensp;&ensp;&ensp;&ensp;<strong>2.OS作为计算机系统资源的管理者</strong><br><img src="/2021/04/18/OS-1/%E6%B5%81%E7%A8%8B%E5%9B%BE1.png" alt="资源的管理者">  </p>
<p>&ensp;&ensp;&ensp;&ensp;<strong>3.OS实现了对计算机资源的抽象</strong></p>
<ul>
<li>在裸机上添加：处理机管理(针对CPU)、存储管理(针对内存和外存)、设备管理 、文件管理</li>
<li>把覆盖了软件的机器称为扩充机或虚拟机器</li>
<li>合理组织工作流程：作业管理、进程管理  </li>
</ul>
<p><img src="/2021/04/18/OS-1/detail.png" alt="细节">  </p>
<h3 id="三、推动操作系统发展的动力"><a href="#三、推动操作系统发展的动力" class="headerlink" title="三、推动操作系统发展的动力"></a>三、推动操作系统发展的动力</h3><ul>
<li>不断提高计算机资源利用率</li>
<li>方便用户</li>
<li>器件的不断更新换代</li>
<li>计算机体系结构的不断发展</li>
<li>不断提出新的应用需求  </li>
</ul>
<h2 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h2><h3 id="无操作系统的计算机系统"><a href="#无操作系统的计算机系统" class="headerlink" title="无操作系统的计算机系统"></a>无操作系统的计算机系统</h3><p>&ensp;&ensp;&ensp;&ensp;<strong>1、人工操作阶段</strong><br>&ensp;&ensp;&ensp;&ensp;电子管时代，1945-50年代:<br>&ensp;&ensp;&ensp;&ensp;手工操作计算机，用机器语言编写程序，操作繁琐、易出错，效率低，CPU等待人工操作、利用率低<br><img src="/2021/04/18/OS-1/%E6%89%8B%E5%B7%A5%E6%93%8D%E4%BD%9C.png" alt="手工操作计算机"><br>&ensp;&ensp;&ensp;&ensp;手工操作的缺点：<br>&ensp;&ensp;&ensp;&ensp;（1）易出错、操作繁琐、难于掌握<br>&ensp;&ensp;&ensp;&ensp;（2）CPU的利用率低<br>&ensp;&ensp;&ensp;&ensp;提高效率低途径：<br>&ensp;&ensp;&ensp;&ensp;（1）专门的操作员/批量处理<br>&ensp;&ensp;&ensp;&ensp;（2）脱机I/O<br>&ensp;&ensp;&ensp;&ensp;（3）通道技术、中断技术、缓冲技术<br>&ensp;&ensp;&ensp;&ensp;<strong>2. 脱机输入/输出(Off-Line I/O)方式</strong><br>&ensp;&ensp;&ensp;&ensp;这种脱机I/O方式的主要优点如下：<br>&ensp;&ensp;&ensp;&ensp;（1）减少了CPU的空闲时间。<br>&ensp;&ensp;&ensp;&ensp;（2）提高I/O速度。<br><img src="/2021/04/18/OS-1/%E8%84%B1%E6%9C%BA.png" alt="I/O脱机">  </p>
<h3 id="成批处理阶段"><a href="#成批处理阶段" class="headerlink" title="成批处理阶段"></a>成批处理阶段</h3><p>&ensp;&ensp;&ensp;&ensp;晶体管时代，50年代末-60年代中，随着中央处理机速度的大幅度提高，人工操作的慢速度和中央处理机运算的高速度之间出现了矛盾，即所谓人机矛盾。为解决这一矛盾，只有设法去掉人工操作，实现作业的自动过渡，这样就出现了成批处理。<br>&ensp;&ensp;&ensp;&ensp;监督程序：是一个常驻内存的小的核心代码，用于实现各作业之间的自动转接，提高了系统效率。<br>&ensp;&ensp;&ensp;&ensp;<strong>1.单道批处理:</strong>    </p>
<ul>
<li>利用磁带把若干作用分类编成作业执行序列  </li>
<li>每批作业由一个专门的监督程序自动依次处理  </li>
<li>可使用汇编语言开发<br><img src="/2021/04/18/OS-1/%E5%8D%95%E9%81%93%E6%89%B9%E5%A4%84%E7%90%86.png" alt="单道批处理"><br>&ensp;&ensp;&ensp;&ensp;单道批处理系统特点：自动性、顺序性、单道性<br>&ensp;&ensp;&ensp;&ensp;成批处理经历了两个阶段：<br>&ensp;&ensp;&ensp;&ensp;联机批处理阶段和脱机批处理阶段。</li>
</ul>
<p>&ensp;&ensp;&ensp;&ensp;联机批处理系统：作业的I/O和计算全部由CPU直接控制。<br><img src="/2021/04/18/OS-1/%E8%81%94%E6%9C%BA%E6%89%B9%E5%A4%84%E7%90%86.png" alt="联机批处理">  </p>
<p>&ensp;&ensp;&ensp;&ensp;脱机批处理系统：由主机和外围计算机（卫星机）组成，外围计算机负责I/O处理，主机和外围计算机可以并行工作。<br><img src="/2021/04/18/OS-1/%E8%84%B1%E6%9C%BA%E6%89%B9%E5%A4%84%E7%90%86.png" alt="脱机批处理"><br> &ensp;&ensp;&ensp;&ensp;<strong>2.多道批处理系统</strong><br>&ensp;&ensp;&ensp;&ensp;多道程序设计技术是指在计算机内存中同时存放多个作业，它们在管理程序控制之下交替执行，共享系统中的各种资源。60年代中-70年代中(集成电路)<br>多道程序运行的特征：<br> &ensp;&ensp;&ensp;&ensp;（1）主存中存放多道程序；<br> &ensp;&ensp;&ensp;&ensp;（2）宏观上并行；<br> &ensp;&ensp;&ensp;&ensp;（3）微观上串行。<br><img src="/2021/04/18/OS-1/%E5%A4%9A%E9%81%93%E6%89%B9%E5%A4%84%E7%90%86.jpg" alt="多道批处理">  </p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>课堂笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验课作业三——银行家算法</title>
    <url>/2021/05/06/os-3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;用C语言模拟银行家算法。个人实验报告使用，如果想参考，不得保留原文60%以上，谢谢配合。</p>
<span id="more"></span>

<h1 id="一、实验目的及要求"><a href="#一、实验目的及要求" class="headerlink" title="一、实验目的及要求"></a>一、实验目的及要求</h1><ul>
<li><p>通过编写和调试一个系统动态分配资源的简单模拟程序；  </p>
</li>
<li><p>观察死锁产生的条件 ； </p>
</li>
<li><p>模拟死锁避免的实现  ；</p>
</li>
<li><p>加深对死锁避免 ；</p>
</li>
<li><p>系统安全状态的理解；  </p>
</li>
<li><p>体会和了解死锁以及避免死锁的具体实现方法。  </p>
</li>
</ul>
<h1 id="二、基本理论介绍"><a href="#二、基本理论介绍" class="headerlink" title="二、基本理论介绍"></a>二、基本理论介绍</h1><h2 id="2-1-银行家算法"><a href="#2-1-银行家算法" class="headerlink" title="2.1 银行家算法"></a>2.1 银行家算法</h2><p>&ensp;&ensp;&ensp;&ensp;银行家算法（Banker’s Algorithm）是一个避免死锁（Deadlock）的著名算法，是由艾兹格·迪杰斯特拉在1965年为T.H.E系统设计的一种避免死锁产生的算法。<br>&ensp;&ensp;&ensp;&ensp;它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。在银行中，客户申请贷款的数量是有限的，每个客户在第一次申请贷款时要声明完成该项目所需的最大资金量，在满足所有贷款要求时，客户应及时归还。银行家在客户申请的贷款数量不超过自己拥有的最大值时，都应尽量满足客户的需要。在这样的描述中，银行家就好比操作系统，资金就是资源，客户就相当于要申请资源的进程。</p>
<h2 id="2-2-安全状态"><a href="#2-2-安全状态" class="headerlink" title="2.2 安全状态"></a>2.2 安全状态</h2><p>&ensp;&ensp;&ensp;&ensp;如果存在一个由系统中所有进程构成的安全序列P1，…，Pn，则系统处于安全状态。安全状态一定是没有死锁发生。</p>
<h2 id="2-3-不安全状态"><a href="#2-3-不安全状态" class="headerlink" title="2.3 不安全状态"></a>2.3 不安全状态</h2><p>&ensp;&ensp;&ensp;&ensp;不存在一个安全序列。不安全状态不一定导致死锁。</p>
<h2 id="2-4-银行家算法所涉及的数据结构"><a href="#2-4-银行家算法所涉及的数据结构" class="headerlink" title="2.4 银行家算法所涉及的数据结构"></a>2.4 银行家算法所涉及的数据结构</h2><h3 id="1）可利用资源向量Available"><a href="#1）可利用资源向量Available" class="headerlink" title="1）可利用资源向量Available"></a>1）可利用资源向量Available</h3><p>&ensp;&ensp;&ensp;&ensp;是个含有m个元素的数组，其中的每一个元素代表一类可利用的资源数目。如果Available[j]=K，则表示系统中现有Rj类资源K个。</p>
<h3 id="2）最大需求矩阵Max"><a href="#2）最大需求矩阵Max" class="headerlink" title="2）最大需求矩阵Max"></a>2）最大需求矩阵Max</h3><p>&ensp;&ensp;&ensp;&ensp;这是一个n×m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求。如果Max[i,j]=K，则表示进程i需要Rj类资源的最大数目为K。</p>
<h3 id="3）分配矩阵Allocation"><a href="#3）分配矩阵Allocation" class="headerlink" title="3）分配矩阵Allocation"></a>3）分配矩阵Allocation</h3><p>&ensp;&ensp;&ensp;&ensp;这也是一个n×m的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数。如果Allocation[i,j]=K，则表示进程i当前已分得Rj类资源的 数目为K。</p>
<h3 id="4）需求矩阵Need。"><a href="#4）需求矩阵Need。" class="headerlink" title="4）需求矩阵Need。"></a>4）需求矩阵Need。</h3><p>&ensp;&ensp;&ensp;&ensp;这也是一个n×m的矩阵，用以表示每一个进程尚需的各类资源数。如果Need[i,j]=K，则表示进程i还需要Rj类资源K个，方能完成其任务。<br>Need[i,j]=Max[i,j]-Allocation[i,j]</p>
<h1 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h1><ol>
<li>设计进程管理数据结构</li>
<li>输入系统资源当前的使用情况，如：系统当前的进程数、各进程的资源信息等</li>
<li>设计安全性检查算法检查系统状态是否安全</li>
<li>动态申请资源，设计银行家算法，在银行家算法中调用安全性检查算法，判断本次申请是否能够满足，进行资源分配</li>
<li>输出每次分配后的安全序列，及系统当前资源分配信息</li>
</ol>
<h1 id="四、功能实现"><a href="#四、功能实现" class="headerlink" title="四、功能实现"></a>四、功能实现</h1><h2 id="4-1-银行家算法实现"><a href="#4-1-银行家算法实现" class="headerlink" title="4.1 银行家算法实现"></a>4.1 银行家算法实现</h2><p>&ensp;&ensp;&ensp;&ensp;在避免死锁的方法中，所施加的限制条件较弱，有可能获得令人满意的系统性能。在该方法中把系统的状态分为安全状态和不安全状态，只要能使系统始终都处于安全状态，便可以避免发生死锁。<br>&ensp;&ensp;&ensp;&ensp;银行家算法的基本思想是分配资源之前，判断系统是否是安全的；若是，才分配。它是最具有代表性的避免死锁的算法。<br>&ensp;&ensp;&ensp;&ensp;设进程cusneed提出请求REQUEST [i]，则银行家算法按如下规则进行判断。<br>&ensp;&ensp;&ensp;&ensp;(1)如果REQUEST [cusneed] [i]&lt;= NEED[cusneed][i]，则转(2)；否则，出错。<br>&ensp;&ensp;&ensp;&ensp;(2)如果REQUEST [cusneed] [i]&lt;= AVAILABLE[i]，则转(3)；否则，等待。<br>&ensp;&ensp;&ensp;&ensp;(3)系统试探分配资源，修改相关数据：<br>&ensp;&ensp;&ensp;&ensp;AVAILABLE[i]-=REQUEST[cusneed][i];<br>&ensp;&ensp;&ensp;&ensp;ALLOCATION[cusneed][i]+=REQUEST[cusneed][i];<br>&ensp;&ensp;&ensp;&ensp;NEED[cusneed][i]-=REQUEST[cusneed][i];<br>&ensp;&ensp;&ensp;&ensp;(4)系统执行安全性检查，如安全，则分配成立；否则试探险性分配作废，系统恢复原状，进程等待。  </p>
<h2 id="4-2-安全性检查算法"><a href="#4-2-安全性检查算法" class="headerlink" title="4.2 安全性检查算法"></a>4.2 安全性检查算法</h2><p>&ensp;&ensp;&ensp;&ensp;(1)设置两个工作向量Work=AVAILABLE;FINISH<br>&ensp;&ensp;&ensp;&ensp;(2)从进程集合中找到一个满足下述条件的进程，<br>&ensp;&ensp;&ensp;&ensp;FINISH==false;<br>&ensp;&ensp;&ensp;&ensp;NEED&lt;=Work;<br>&ensp;&ensp;&ensp;&ensp;如找到，执行（3)；否则，执行（4)<br>&ensp;&ensp;&ensp;&ensp;(3)设进程获得资源，可顺利执行，直至完成，从而释放资源。<br>&ensp;&ensp;&ensp;&ensp;Work=Work+ALLOCATION;<br>&ensp;&ensp;&ensp;&ensp;Finish=true;<br>&ensp;&ensp;&ensp;&ensp;转到（2）<br>&ensp;&ensp;&ensp;&ensp;(4)如所有的进程Finish= true，则表示安全；否则系统不安全。  </p>
<h2 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> processNum 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resourceNum 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXINT 9999</span></span><br><span class="line"><span class="keyword">int</span> avaliable[resourceNum] = &#123; <span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> max[processNum][resourceNum] = &#123;<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> allocation[processNum][resourceNum] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> need[processNum][resourceNum] = &#123;<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> finish[processNum];</span><br><span class="line"><span class="keyword">int</span> request[resourceNum];</span><br><span class="line"><span class="keyword">int</span> safeSeries[processNum] = &#123; MAXINT, MAXINT , MAXINT , MAXINT , MAXINT &#125;;</span><br><span class="line"><span class="comment">//int processNum, resourceNum;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入进程和资源数量，用空格分开\n&quot;</span>);</span><br><span class="line">	<span class="comment">//scanf(&quot;%d%d&quot;, &amp;processNum, &amp;resourceNum);</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入当前可用资源数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;avaliable[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入最大需求矩阵\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;max[i][j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入分配矩阵\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;allocation[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">			need[i][j] = max[i][j] - allocation[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前资源剩余:&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, avaliable[j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;进程名\t Max\t \tAllocation\tNeed\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; P%d\t&quot;</span>, i);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, max[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, allocation[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, need[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Safeinfo</span><span class="params">(<span class="keyword">int</span>* work, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isSafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j, k;</span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> truefinished = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> work[resourceNum];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">		work[i] = avaliable[i];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">		finish[i] = <span class="literal">false</span>;</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> temp0;</span><br><span class="line">	<span class="keyword">while</span> (truefinished != processNum) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (finish[i] != <span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">				<span class="keyword">if</span> (need[i][j] &gt; work[j]) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (j == resourceNum) &#123;</span><br><span class="line">			finish[i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">Safeinfo</span>(work, i);</span><br><span class="line">			<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; resourceNum; k++) &#123;</span><br><span class="line">				work[k] += allocation[i][k];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> k2;</span><br><span class="line">			safeSeries[truefinished++] = i;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= processNum) &#123;</span><br><span class="line">			<span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">				temp = truefinished;</span><br><span class="line">				temp0 = truefinished;</span><br><span class="line">			&#125;</span><br><span class="line">			i = i % processNum;</span><br><span class="line">			<span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">				temp = truefinished;</span><br><span class="line">				<span class="keyword">if</span> (temp == temp0)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					temp0 = temp;</span><br><span class="line">			&#125;</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		temp = truefinished;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (truefinished == processNum) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n系统安全,\n\n安全序列为：&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, safeSeries[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;******系统不安全******\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Safeinfo</span><span class="params">(<span class="keyword">int</span>* work, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; P%d\t&quot;</span>, i);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, work[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, need[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t &quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, allocation[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, allocation[i][j] + work[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j, curProcess;</span><br><span class="line">	<span class="keyword">int</span> wheInit = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (wheInit)</span><br><span class="line">		<span class="comment">//Init();</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">showin</span>();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n系统安全情况分析\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; PID\t Work\t\tNeed\tAllocation\tWork+Allocation\n&quot;</span>);</span><br><span class="line">	<span class="built_in">isSafe</span>();</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n---------------------------------------------------------\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n输入要分配的进程：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;curProcess);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n输入要分配给进程P%d的资源：&quot;</span>, curProcess);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;request[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (request[j] &lt;= need[curProcess][j])<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;ERROR！\n&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (j == resourceNum) &#123;</span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (request[j] &lt;= need[curProcess][j])<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;资源不足，等待中！\n&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (j == resourceNum) &#123;</span><br><span class="line">				<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">					avaliable[j] -= request[j];</span><br><span class="line">					allocation[curProcess][j] += request[j];</span><br><span class="line">					need[curProcess][j] -= request[j];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n系统安全情况分析\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; PID\t Work\t\tNeed\tAllocation\tWork+Allocation\n&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">isSafe</span>()) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;分配成功！\n&quot;</span>);</span><br><span class="line">					<span class="built_in">showin</span>();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; resourceNum; j++) &#123;</span><br><span class="line">						avaliable[j] += request[j];</span><br><span class="line">						allocation[curProcess][j] -= request[j];</span><br><span class="line">						need[curProcess][j] += request[j];</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;分配失败！\n&quot;</span>);</span><br><span class="line">					<span class="built_in">showin</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、结果测试与分析"><a href="#五、结果测试与分析" class="headerlink" title="五、结果测试与分析"></a>五、结果测试与分析</h1><p>&ensp;&ensp;&ensp;&ensp;以下为部分运行结果截图：</p>
<p><img src="/2021/05/06/os-3/%E5%88%86%E9%85%8D%E6%88%90%E5%8A%9F.png" alt="分配成功"><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;图1 分配成功<br><img src="/2021/05/06/os-3/%E5%88%86%E9%85%8D%E5%A4%B1%E8%B4%A5.png" alt="分配失败"><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;图2 分配失败   </p>
<p>&ensp;&ensp;&ensp;&ensp;分析略</p>
<h1 id="六、心得体会"><a href="#六、心得体会" class="headerlink" title="六、心得体会"></a>六、心得体会</h1><p>&ensp;&ensp;&ensp;&ensp;以上文字和代码仅供参考，请勿直接复制用于完成作业。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>实验课作业</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实验课作业二——进程调度</title>
    <url>/2021/04/19/processtest/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;用JAVA模拟进程调度过程。个人实验报告使用，如果想参考，不得保留原文60%以上，谢谢配合。</p>
<span id="more"></span>

<h1 id="一、实验目的及要求"><a href="#一、实验目的及要求" class="headerlink" title="一、实验目的及要求"></a>一、实验目的及要求</h1><p>&ensp;&ensp;&ensp;&ensp;进程调度是处理机管理的核心内容。本实验要求用高级语言编写模拟进程调度程序，以便加深理解有关进程控制块、进程队列等概念，并体会和了解先来先服务（FCFS算法）、短进程优先（SJF算法），优先权（PSA算法）、高响应比优先（HRN算法）等调度算法的具体实现。</p>
<h1 id="二、基本理论介绍"><a href="#二、基本理论介绍" class="headerlink" title="二、基本理论介绍"></a>二、基本理论介绍</h1><h2 id="2-1-处理机调度的基本概念"><a href="#2-1-处理机调度的基本概念" class="headerlink" title="2.1 处理机调度的基本概念"></a>2.1 处理机调度的基本概念</h2><p>&ensp;&ensp;&ensp;&ensp;处理机是计算机系统中的重要资源，处理机调度算法不仅对处理器的利用效率和用户进程的执行有影响，同时还与内存等其他资源的使用密切相关，对整个计算机系统的综合性能指标也有重要影响。</p>
<h2 id="2-2-进程调度方式"><a href="#2-2-进程调度方式" class="headerlink" title="2.2 进程调度方式"></a>2.2 进程调度方式</h2><h3 id="1）抢占式（剥夺式）"><a href="#1）抢占式（剥夺式）" class="headerlink" title="1）抢占式（剥夺式）"></a>1）抢占式（剥夺式）</h3><p>&ensp;&ensp;&ensp;&ensp;当一个进程正在处理器上运行时，系统可以根据规定的原则剥夺分配给它的处理器，而把处理器分配给其它进程使用</p>
<h3 id="2）非抢占式（非剥夺式）"><a href="#2）非抢占式（非剥夺式）" class="headerlink" title="2）非抢占式（非剥夺式）"></a>2）非抢占式（非剥夺式）</h3><p>&ensp;&ensp;&ensp;&ensp;一旦某个进程开始执行后便不再出让处理器，除非该进程运行结束或发生了某个事件不能继续执行。</p>
<h2 id="2-3-本实验所使用的调度算法"><a href="#2-3-本实验所使用的调度算法" class="headerlink" title="2.3 本实验所使用的调度算法"></a>2.3 本实验所使用的调度算法</h2><h3 id="1）先来先服务（FCFS）"><a href="#1）先来先服务（FCFS）" class="headerlink" title="1）先来先服务（FCFS）"></a>1）先来先服务（FCFS）</h3><p>&ensp;&ensp;&ensp;&ensp; 按照进程进入就绪队列的先后顺序调度并分配处理机执行。先来先服务调度算法是一种非抢占式的算法，先进入就绪队列的进程，先分配处理机运行。一旦一个进程占有了处理机，它就一直运行下去，直到该进程完成工作或者因为等待某事件发生而不能运行时才释放处理机。<br>&ensp;&ensp;&ensp;&ensp;（1）系统只有按FIFO规则建立的后备作业队列或就绪进程队列即可，就是一个作业控制快JCB或进程控制块PCB加入队列时加在相应队列末尾。<br>&ensp;&ensp;&ensp;&ensp;（2）调度退出队列时从相应队列首开始顺序扫描，将相关的JCB或PCB调度移出相应队列。<br>&ensp;&ensp;&ensp;&ensp;（3）优缺点：有利于长作业（进程）而不利于短作业（进程）；有利于CPU繁忙型作业（进程），而不利于I/O繁忙型作业（进程）。  </p>
<h3 id="2）非剥夺式的短作业优先算法（SJF）"><a href="#2）非剥夺式的短作业优先算法（SJF）" class="headerlink" title="2）非剥夺式的短作业优先算法（SJF）"></a>2）非剥夺式的短作业优先算法（SJF）</h3><p>&ensp;&ensp;&ensp;&ensp;短进程优先算法是以作业的长短来计算优先级，作业越短，其优先级越高。作业的长短是以作业所要求的运行时间来衡量的。在把短作业优先调度算法用于作业调度时，它将从外存的作业后备队列中选择若干个估计运行时间最短的作业，优先将它们调入内存运行。<br>&ensp;&ensp;&ensp;&ensp;(1)比FCFS改善平均周转时间和平均带权周转时间，缩短作业的等待时间；<br>&ensp;&ensp;&ensp;&ensp;(2)对长作业非常不利，可能长时间得不到执行；未能依据作业的紧迫程度来划分执行的优先级；难以准确估计作业（进程）的执行时间，从而影响调度性能。</p>
<h3 id="3）非剥夺式的优先级算法（PSA）"><a href="#3）非剥夺式的优先级算法（PSA）" class="headerlink" title="3）非剥夺式的优先级算法（PSA）"></a>3）非剥夺式的优先级算法（PSA）</h3><p>&ensp;&ensp;&ensp;&ensp;优先级算法是多级队列算法的改进，平衡各进程对响应时间的要求。适用于作业调度和进程调度，可分成抢先式和非抢先式。<br>&ensp;&ensp;&ensp;&ensp;作业调度中的静态优先级大多按以下原则确定：<br>&ensp;&ensp;&ensp;&ensp;（1）由用户自己根据作业的紧急程度输入一个适当的优先级。<br>&ensp;&ensp;&ensp;&ensp;（2）由系统或操作员根据作业类型指定优先级。<br>&ensp;&ensp;&ensp;&ensp;（3）系统根据作业要求资源情况确定优先级。  </p>
<h3 id="4）最高响应比优先法（HRN）"><a href="#4）最高响应比优先法（HRN）" class="headerlink" title="4）最高响应比优先法（HRN）"></a>4）最高响应比优先法（HRN）</h3><p>&ensp;&ensp;&ensp;&ensp;最高响应比优先法(HRN，Highest Response_ratio Next)是对FCFS方式和SJF方式的一种综合平衡。FCFS方式只考虑每个作业的等待时间而未考虑执行时间的长短，而SJF方式只考虑执行时间而未考虑等待时间的长短。因此，这两种调度算法在某些极端情况下会带来某些不便。HRN调度策略同时考虑每个作业的等待时间长短和估计需要的执行时间长短，从中选出响应比最高的作业投入执行。<br>&ensp;&ensp;&ensp;&ensp;响应比R定义如下：<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;R =(W+T)/T = 1+W/T<br>&ensp;&ensp;&ensp;&ensp;其中T为该作业估计需要的执行时间，W为作业在后备状态队列中的等待时间。每当要进行作业调度时，系统计算每个作业的响应比，选择其中R最大者投入执行。这样，即使是长作业，随着它等待时间的增加，W / T也就随着增加，也就有机会获得调度执行。这种算法是介于FCFS和SJF之间的一种折中算法。由于长作业也有机会投入运行，在同一时间内处理的作业数显然要少于SJF法，从而采用HRN方式时其吞吐量将小于采用SJF法时的吞吐量。另外，由于每次调度前要计算响应比，系统开销也要相应增加。</p>
<h1 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h1><p>1.设计进程控制块PCB的结构，通常应包括如下信息：<br>&ensp;&ensp;&ensp;&ensp;进程名、进程优先数、进程的到达时间、服务时间、进程的状态等<br>2.编写四种调度算法程序：<br>&ensp;&ensp;&ensp;&ensp;FCFS&ensp;&ensp;&ensp;&ensp;非抢占SJF&ensp;&ensp;&ensp;&ensp; 非抢占PSA &ensp;&ensp;&ensp;&ensp;HRRN<br>3.输入参数。<br>&ensp;&ensp;&ensp;&ensp;输入进程数目<br>&ensp;&ensp;&ensp;&ensp;各进程的相关数据（进程ID,到达时间，服务时间，优先级等）<br>4.选择调度算法<br>5.按要求输出结果（界面简洁美观）<br>&ensp;&ensp;&ensp;&ensp;1）要求输出调度过程<br>&ensp;&ensp;&ensp;&ensp;2）要求输出各进程在不同的算法下的完成时间，周转时间，带权周转时间，平均周转时间，平均带权周转时间，以及调度顺序。</p>
<h1 id="四、功能实现"><a href="#四、功能实现" class="headerlink" title="四、功能实现"></a>四、功能实现</h1><p>代码部分参考：<a href="https://blog.csdn.net/qq_37373250/article/details/85526518">https://blog.csdn.net/qq_37373250/article/details/85526518</a></p>
<h2 id="4-1-定义JCB（或PCB）"><a href="#4-1-定义JCB（或PCB）" class="headerlink" title="4.1 定义JCB（或PCB）"></a>4.1 定义JCB（或PCB）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCB</span> </span>&#123;</span><br><span class="line">	String name;<span class="comment">//进程名</span></span><br><span class="line">	<span class="keyword">int</span> arriveTime;<span class="comment">//到达时间</span></span><br><span class="line">	<span class="keyword">int</span> serveTime;<span class="comment">//服务时间</span></span><br><span class="line">	<span class="keyword">int</span> beginTime;<span class="comment">//开始时间</span></span><br><span class="line">	<span class="keyword">int</span> finshTime;<span class="comment">//结束时间</span></span><br><span class="line">	<span class="keyword">int</span> roundTime;<span class="comment">//周转时间</span></span><br><span class="line">	<span class="keyword">double</span> aveRoundTime;<span class="comment">//带权周转时间</span></span><br><span class="line">	<span class="keyword">int</span> waitTime;<span class="comment">//记录每个进程到达后的等待时间，只用于最高响应比优先调度算法中</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">JCB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">JCB</span><span class="params">(String name, <span class="keyword">int</span> arriveTime, <span class="keyword">int</span> serveTime,<span class="keyword">double</span> priority)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.arriveTime = arriveTime;</span><br><span class="line">		<span class="keyword">this</span>.serveTime = serveTime;</span><br><span class="line">		<span class="keyword">this</span>.waitTime = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String info = <span class="keyword">new</span> String(<span class="string">&quot;进程名：&quot;</span>+<span class="keyword">this</span>.name);</span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp;&ensp;&ensp;JCB类的代码如上所示，为方便JCB实例的创建，构造函数使用相关数据作为参数（进程名、到达时间、服务时间、优先级）。</p>
<h2 id="4-2-四种算法的实现"><a href="#4-2-四种算法的实现" class="headerlink" title="4.2 四种算法的实现"></a>4.2 四种算法的实现</h2><p>&ensp;&ensp;&ensp;&ensp;基本思想是通过各种算法来定义不同的排序方式，然后用队列一一加载排好序的进程，之后逐个进行工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">processMenu</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	ArrayList&lt;JCB&gt; jcb;<span class="comment">// 存放所有进程</span></span><br><span class="line">	LinkedList&lt;JCB&gt; link;<span class="comment">// 存放已经进入队列的进程</span></span><br><span class="line">	ArrayList&lt;JCB&gt; new_jcb;<span class="comment">// 存放按指定调度算法排序后的进程</span></span><br><span class="line">	JCB nowProess;<span class="comment">// 当前应执行进程</span></span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line">		jcb = <span class="keyword">new</span> ArrayList&lt;JCB&gt;();</span><br><span class="line">		link = <span class="keyword">new</span> LinkedList&lt;JCB&gt;();</span><br><span class="line">		new_jcb = <span class="keyword">new</span> ArrayList&lt;JCB&gt;();</span><br><span class="line">		JCB p1 = <span class="keyword">new</span> JCB(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">		JCB p2 = <span class="keyword">new</span> JCB(<span class="string">&quot;B&quot;</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">		JCB p3 = <span class="keyword">new</span> JCB(<span class="string">&quot;C&quot;</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">		JCB p4 = <span class="keyword">new</span> JCB(<span class="string">&quot;D&quot;</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">		JCB p5 = <span class="keyword">new</span> JCB(<span class="string">&quot;E&quot;</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">		jcb.add(p1);jcb.add(p2);jcb.add(p3);jcb.add(p4);jcb.add(p5);</span><br><span class="line">		<span class="comment">//先将jcb排序，便于下面的算法实现，就不需要再定义一个标识进程是否已到达的boolean,即无需每次都从头开始扫描jcb容器，</span></span><br><span class="line">		<span class="comment">//而是用一个K记录下当前已经扫描到的位置，一次遍历即可，提高了算法效率。</span></span><br><span class="line">		Collections.sort(jcb, <span class="keyword">new</span> compareAt_St());</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FCFS</span><span class="params">()</span></span>&#123;<span class="comment">//先来先服务算法</span></span><br><span class="line">		ProcessQueue pq=<span class="keyword">new</span> ProcessQueue();<span class="comment">//调用内部类</span></span><br><span class="line">		pq.EnqueueLast();<span class="comment">//让最先到达的进程先入队</span></span><br><span class="line">		System.out.println(<span class="string">&quot;*****************************************************&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(!link.isEmpty()) &#123;<span class="comment">//while(new_jcb.size()!=jcb.size())</span></span><br><span class="line">			pq.DisplayQueue();<span class="comment">//打印当前队列中的进程</span></span><br><span class="line">			pq.Dequeue();<span class="comment">//出队，一次一个</span></span><br><span class="line">			pq.EnqueueLast();<span class="comment">//已到达的进程入队</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SJF</span><span class="params">()</span> </span>&#123;<span class="comment">// 短作业优先算法</span></span><br><span class="line">		ProcessQueue pq=<span class="keyword">new</span> ProcessQueue();</span><br><span class="line">		pq.EnqueueLast();</span><br><span class="line">		System.out.println(<span class="string">&quot;*****************************************************&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(!link.isEmpty()) &#123;</span><br><span class="line">			pq.DisplayQueue();<span class="comment">//打印当前队列中的进程</span></span><br><span class="line">			pq.Dequeue();<span class="comment">//出队，一次一个</span></span><br><span class="line">			pq.EnqueueLast();<span class="comment">//已到达的进程入队</span></span><br><span class="line">			Collections.sort(link, <span class="keyword">new</span> compareSt());<span class="comment">//队列中的进程还需按服务时间长度进行排序</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RR</span><span class="params">()</span> </span>&#123;<span class="comment">//时间片轮转调度算法</span></span><br><span class="line">		ProcessQueue pq=<span class="keyword">new</span> ProcessQueue();</span><br><span class="line">		pq.EnqueueLast();</span><br><span class="line">		System.out.println(<span class="string">&quot;*****************************************************&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(!link.isEmpty()) &#123;</span><br><span class="line">			pq.DisplayQueue();<span class="comment">//打印当前队列中的进程</span></span><br><span class="line">			pq.Dequeue(<span class="number">1</span>);<span class="comment">//出队，一次一个，因为上一轮出的得让刚到达的进程先进队列，所以没办法，进队操作只能也放在这个函数里了</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HRN</span><span class="params">()</span> </span>&#123;<span class="comment">//最高响应比优先调度算法</span></span><br><span class="line">		ProcessQueue pq=<span class="keyword">new</span> ProcessQueue();</span><br><span class="line">		pq.EnqueueLast();</span><br><span class="line">		System.out.println(<span class="string">&quot;*****************************************************&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(!link.isEmpty()) &#123;</span><br><span class="line">			pq.DisplayQueue();<span class="comment">//打印当前队列中的进程</span></span><br><span class="line">			pq.Dequeue();<span class="comment">//出队，一次一个</span></span><br><span class="line">			pq.EnqueueLast();<span class="comment">//已到达的进程入队</span></span><br><span class="line">			Collections.sort(link, <span class="keyword">new</span> comparePriority());<span class="comment">//队列中的进程还需按响应比进行排序</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">ProcessQueue</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">// jcb中的进程遍历时的下标</span></span><br><span class="line">		<span class="keyword">int</span> nowTime = <span class="number">0</span>;<span class="comment">// 当前时间</span></span><br><span class="line">		<span class="keyword">double</span> sliceTime;<span class="comment">//轮转调度时间片</span></span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;<span class="comment">//记录当前出入队列的次数</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnqueueLast</span><span class="params">()</span> </span>&#123;<span class="comment">//进程首次入队，可一次进多个,从队尾进入</span></span><br><span class="line">			<span class="keyword">while</span> (k &lt; jcb.size()) &#123;<span class="comment">//当遍历完jcb中的所有进程时结束</span></span><br><span class="line">				<span class="keyword">if</span> (jcb.get(k).arriveTime &lt;= nowTime) &#123;<span class="comment">//已经到达的进程按到达时间先后进入队列</span></span><br><span class="line">					link.addLast(jcb.get(k));</span><br><span class="line">					k++;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;<span class="comment">//如果该进程还未入队，即先结束遍历，保留当前下标k值，注意：此处不要k--；</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnqueueFirst</span><span class="params">()</span> </span>&#123;<span class="comment">//进程首次入队，可一次进多个,从队首进入</span></span><br><span class="line">			<span class="keyword">while</span> (k &lt; jcb.size()) &#123;<span class="comment">//当遍历完jcb中的所有进程时结束</span></span><br><span class="line">				<span class="keyword">if</span> (jcb.get(k).arriveTime &lt;= nowTime) &#123;<span class="comment">//已经到达的进程按到达时间先后进入队列</span></span><br><span class="line">					link.addFirst(jcb.get(k));</span><br><span class="line">					k++;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;<span class="comment">//如果该进程还未入队，即先结束遍历，保留当前下标k值，注意：此处不要k--；</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">()</span> </span>&#123;<span class="comment">//进程出队，一次只出一个</span></span><br><span class="line">			nowProess = link.removeFirst();<span class="comment">//移除队列的队首元素并且返回该对象元素</span></span><br><span class="line">			nowProess.beginTime = nowTime;<span class="comment">//计算开始时间，即为上一个进程的结束时间</span></span><br><span class="line">			nowProess.finshTime = nowProess.beginTime + nowProess.serveTime;<span class="comment">//计算结束时间，该进程开始时间+服务时间</span></span><br><span class="line">			nowProess.roundTime = nowProess.finshTime - nowProess.arriveTime;<span class="comment">//计算周转时间</span></span><br><span class="line">			nowProess.aveRoundTime = (<span class="keyword">double</span>) nowProess.roundTime / nowProess.serveTime;<span class="comment">//计算平均周转时间</span></span><br><span class="line">			nowTime = nowProess.finshTime;<span class="comment">//获得结束时间，即当前时间，方便判断剩下的进程是否已到达</span></span><br><span class="line">			new_jcb.add(nowProess);<span class="comment">//经处理过数据后加入new_jcb容器</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;link.size();++i) &#123;</span><br><span class="line">				link.get(i).waitTime++;<span class="comment">//所有进入等待队列的进程等待时间+1,此处只为最高响应比算法所用</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(<span class="keyword">double</span> sliceTime)</span> </span>&#123;<span class="comment">//重载Dequeue方法，实现轮转调度算法的出队</span></span><br><span class="line">			nowProess = link.removeFirst();<span class="comment">//移除队列的队首元素并且返回该对象元素</span></span><br><span class="line">			<span class="keyword">if</span>(nowProess.firstTimeTag==<span class="keyword">false</span>) &#123;</span><br><span class="line">				<span class="comment">/*轮转调度进程可能会多次反复进出队列，不像FCFS和SJF的进程只会进出一次，所以计算开始时间可以设个标志位，让每个进程在</span></span><br><span class="line"><span class="comment">				 * 第一次执行时记录一遍即可*/</span></span><br><span class="line">				nowProess.beginTime=nowTime;<span class="comment">//进程开始执行的时间</span></span><br><span class="line">				nowProess.firstTimeTag=<span class="keyword">true</span>;<span class="comment">//计算第一次即可，下次无需更新计算</span></span><br><span class="line">			&#125;</span><br><span class="line">			nowTime+=sliceTime;<span class="comment">//每次出队，用时一个时间片，更新当前时间</span></span><br><span class="line">			nowProess.clock+=sliceTime;<span class="comment">//更新当前出队列的进程已服务时间</span></span><br><span class="line">			<span class="keyword">if</span>(nowProess.clock&gt;=nowProess.serveTime) &#123;</span><br><span class="line">				nowProess.finshTime=nowTime;<span class="comment">//计算该进程完成时间</span></span><br><span class="line">				nowProess.roundTime = nowProess.finshTime - nowProess.arriveTime;<span class="comment">//计算周转时间</span></span><br><span class="line">				nowProess.aveRoundTime = (<span class="keyword">double</span>) nowProess.roundTime / nowProess.serveTime;<span class="comment">//计算平均周转时间</span></span><br><span class="line">				new_jcb.add(nowProess);<span class="comment">//经处理过数据后加入new_jcb容器</span></span><br><span class="line">				EnqueueFirst();<span class="comment">//已到达的进程先入队</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				EnqueueFirst();<span class="comment">//已到达的进程先入队</span></span><br><span class="line">				link.addLast(nowProess);<span class="comment">//上一轮出的再紧接着进入队尾</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayQueue</span><span class="params">()</span></span>&#123;<span class="comment">//队列中等候的进程</span></span><br><span class="line">			i++;</span><br><span class="line">			System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;次队列中排队的进程：&quot;</span>+link);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;进程名 到达时间  服务时间   开始时间  完成时间  周转时间  带权周转时间&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; new_jcb.size(); ++i) &#123;</span><br><span class="line">			System.out.println(new_jcb.get(i).name + <span class="string">&quot;        &quot;</span> + new_jcb.get(i).arriveTime + <span class="string">&quot;          &quot;</span> +</span><br><span class="line">		new_jcb.get(i).serveTime+ <span class="string">&quot;         &quot;</span> + new_jcb.get(i).beginTime + <span class="string">&quot;         &quot;</span> + new_jcb.get(i).finshTime +</span><br><span class="line">		<span class="string">&quot;         &quot;</span>+ new_jcb.get(i).roundTime + <span class="string">&quot;        &quot;</span> + new_jcb.get(i).aveRoundTime);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">float</span> avg_zhouzhuan,avg_daiquan;</span><br><span class="line">        <span class="keyword">float</span> sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; new_jcb.size(); ++i)&#123;</span><br><span class="line">            sum1 += new_jcb.get(i).roundTime;</span><br><span class="line">            sum2 += new_jcb.get(i).aveRoundTime;</span><br><span class="line">        &#125;</span><br><span class="line">        avg_zhouzhuan = sum1/<span class="number">5</span>;</span><br><span class="line">        avg_daiquan = sum2/<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;平均周转时间是：&quot;</span>+avg_zhouzhuan);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均带权周转时间是：&quot;</span>+avg_daiquan);</span><br><span class="line">		new_jcb.clear();<span class="comment">//清空new_jcb容器内的内容，方便存储各种算法的结果并展示</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">compareSt</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">JCB</span>&gt; </span>&#123;<span class="comment">// 按服务时间升序</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(JCB arg0, JCB arg1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> arg0.serveTime - arg1.serveTime;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">compareAt_St</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">JCB</span>&gt; </span>&#123;<span class="comment">// 按到达时间升序，若到达时间相同，按服务时间升序</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(JCB o1, JCB o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = o1.arriveTime - o2.arriveTime;</span><br><span class="line">		<span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> o1.serveTime &gt; o2.serveTime ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">comparePriority</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">JCB</span>&gt;</span>&#123;<span class="comment">//按响应比升序排序</span></span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(JCB o1, JCB o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> r1=(<span class="keyword">double</span>)o1.waitTime/o1.serveTime;</span><br><span class="line">		<span class="keyword">double</span> r2=(<span class="keyword">double</span>)o2.waitTime/o2.serveTime;</span><br><span class="line">		<span class="keyword">return</span> r1&gt;r2?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试用代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProcess</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		processMenu pm=<span class="keyword">new</span> processMenu();</span><br><span class="line">		pm.init();<span class="comment">//初始化容器</span></span><br><span class="line">		pm.FCFS();pm.printProcess();</span><br><span class="line">        System.out.println(<span class="string">&quot;FCFS&quot;</span>);</span><br><span class="line">		pm.SJF();pm.printProcess();</span><br><span class="line">        System.out.println(<span class="string">&quot;SJF&quot;</span>);</span><br><span class="line">		pm.HRN();pm.printProcess();</span><br><span class="line">        System.out.println(<span class="string">&quot;HRN&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、结果测试与分析"><a href="#五、结果测试与分析" class="headerlink" title="五、结果测试与分析"></a>五、结果测试与分析</h1><p>以下为运行结果（因为还没搞定上传图片的功能，先复制文字替代了)</p>
<hr>
<p>第1次队列中排队的进程：[进程名：A]<br>第2次队列中排队的进程：[进程名：B, 进程名：C, 进程名：D, 进程名：E]<br>第3次队列中排队的进程：[进程名：C, 进程名：D, 进程名：E]<br>第4次队列中排队的进程：[进程名：D, 进程名：E]<br>第5次队列中排队的进程：[进程名：E]<br>进程名 到达时间  服务时间   开始时间  完成时间  周转时间  带权周转时间<br>A        0          4         0         4         4        1.0<br>B        1          3         4         7         6        2.0<br>C        2          5         7         12         10        2.0<br>D        3          2         12         14         11        5.5<br>E        4          4         14         18         14        3.5<br>平均周转时间是：9.0<br>平均带权周转时间是：2.8<br>FCFS  </p>
<hr>
<p>第1次队列中排队的进程：[进程名：A]<br>第2次队列中排队的进程：[进程名：D, 进程名：B, 进程名：E, 进程名：C]<br>第3次队列中排队的进程：[进程名：B, 进程名：E, 进程名：C]<br>第4次队列中排队的进程：[进程名：E, 进程名：C]<br>第5次队列中排队的进程：[进程名：C]<br>进程名 到达时间  服务时间   开始时间  完成时间  周转时间  带权周转时间<br>A        0          4         0         4         4        1.0<br>D        3          2         4         6         3        1.5<br>B        1          3         6         9         8        2.6666666666666665<br>E        4          4         9         13         9        2.25<br>C        2          5         13         18         16        3.2<br>平均周转时间是：8.0<br>平均带权周转时间是：2.1233335<br>SJF  </p>
<hr>
<p>第1次队列中排队的进程：[进程名：A]<br>第2次队列中排队的进程：[进程名：B, 进程名：C, 进程名：D, 进程名：E]<br>第3次队列中排队的进程：[进程名：C, 进程名：E, 进程名：D]<br>第4次队列中排队的进程：[进程名：E, 进程名：D]<br>第5次队列中排队的进程：[进程名：D]<br>进程名 到达时间  服务时间   开始时间  完成时间  周转时间  带权周转时间<br>A        0          4         0         4         4        1.0<br>B        1          3         4         7         6        2.0<br>C        2          5         7         12         10        2.0<br>E        4          4         12         16         12        3.0<br>D        3          2         16         18         15        7.5<br>平均周转时间是：9.4<br>平均带权周转时间是：3.1<br>HRN  </p>
<h1 id="六、心得体会"><a href="#六、心得体会" class="headerlink" title="六、心得体会"></a>六、心得体会</h1><p>&ensp;&ensp;&ensp;&ensp;以上文字和代码仅供参考，请勿直接复制用于完成作业。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>实验课作业</tag>
      </tags>
  </entry>
  <entry>
    <title>二维矩阵前缀和计算方法</title>
    <url>/2021/05/06/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    <content><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;二维矩阵前缀和的思考与实现。</p>
<span id="more"></span>

<h1 id="一、一维数组前缀和"><a href="#一、一维数组前缀和" class="headerlink" title="一、一维数组前缀和"></a>一、一维数组前缀和</h1><p>&ensp;&ensp;&ensp;&ensp;首先在解答二维矩阵的前缀和的问题之前，先复习一下一维的前缀和</p>
<h2 id="1-1-前缀和的介绍"><a href="#1-1-前缀和的介绍" class="headerlink" title="1.1 前缀和的介绍"></a>1.1 前缀和的介绍</h2><p>&ensp;&ensp;&ensp;&ensp;假设我们有一个字符串ABCDE，什么是这个单词的前缀，A、AB、ABC、ABCD、ABCDE就是这个单词的前缀，就是从第一个字母开始，依次往后拼接。E、ED、EDC、EDCB、EDCBA被称为这个单词的后缀。<br>&ensp;&ensp;&ensp;&ensp;那么对于一个数组的前缀，例如数组a = [1,2,3,4,5]，我们维护一个由前缀的和组成的数组sum，sum[i]表示数组中a[0]~ a[i] 的和。<br>&ensp;&ensp;&ensp;&ensp;sum[0] = a[0]<br>&ensp;&ensp;&ensp;&ensp;sum[1] = a[0] + a[1]<br>&ensp;&ensp;&ensp;&ensp;sum[2] = a[0] + a[1] + a[2]<br>&ensp;&ensp;&ensp;&ensp;sum[3] = a[0] + a[1] + a[2] + a[3]<br>&ensp;&ensp;&ensp;&ensp;sum[4] = a[0] + a[1] + a[2] + a[3] + a[4]<br>&ensp;&ensp;&ensp;&ensp;sum数组就被称为前缀和数组。<br>&ensp;&ensp;&ensp;&ensp;用在整数数组中，sum数组即为前n个整数的和。  </p>
<h2 id="1-2-前缀和的作用"><a href="#1-2-前缀和的作用" class="headerlink" title="1.2 前缀和的作用"></a>1.2 前缀和的作用</h2><p>&ensp;&ensp;&ensp;&ensp;前缀和的最主要目的是求子数组的和的大小。例如元素a[1]到a[3]的和。可以用sum[3] - sum[0]表示。<br>&ensp;&ensp;&ensp;&ensp;用此法求多个子数组的和，因为只需要遍历一遍数组，记录下sum数组，所以复杂度为O(n)，计算sum[r] - sum[l]的复杂度为O(1)，可以忽略不计，大大提升了需要计算多个子数组和时的效率。<br>&ensp;&ensp;&ensp;&ensp;注意：这里sum中的i表示的是前i个数的和，不是下标，因为题目中需要用到前0个数的和。</p>
<h2 id="1-3-一维前缀和举例"><a href="#1-3-一维前缀和举例" class="headerlink" title="1.3 一维前缀和举例"></a>1.3 一维前缀和举例</h2><p><strong>例题1：</strong>   </p>
<p>输入一个长度为 n 的整数序列。</p>
<p>接下来再输入 m 个询问，每个询问输入一对 l,r。</p>
<p>对于每个询问，输出原序列中从第 l 个数到第 r 个数的和。</p>
<p><strong>输入格式</strong><br>第一行包含两个整数 n 和 m。</p>
<p>第二行包含 n 个整数，表示整数数列。</p>
<p>接下来 m 行，每行包含两个整数 l 和 r，表示一个询问的区间范围。</p>
<p><strong>输出格式</strong><br>共 m 行，每行输出一个询问的结果。</p>
<p><strong>数据范围</strong><br>1≤l≤r≤n,<br>1≤n,m≤100000,<br>−1000≤数列中元素的值≤1000  </p>
<p><strong>输入样例：</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3  </span><br><span class="line">2 1 3 6 4  </span><br><span class="line">1 2  </span><br><span class="line">1 3  </span><br><span class="line">2 4  </span><br></pre></td></tr></table></figure>
<p><strong>输出样例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3  </span><br><span class="line">6  </span><br><span class="line">10 </span><br></pre></td></tr></table></figure>

<p><strong>代码实现：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> s[n+<span class="number">1</span>];</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        s[i] = s[i<span class="number">-1</span>] + a[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s[y] - s[x<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&ensp;&ensp;&ensp;&ensp;思想和相关代码的实现都非常简单，但是如果简单对给出的每一组数据都采用从a[l]到a[r]累加求和的方式，复杂度会由O(m+n)上升为O(mn)，导致部分样例超时无法通过。</p>
<h1 id="二、二维矩阵前缀和"><a href="#二、二维矩阵前缀和" class="headerlink" title="二、二维矩阵前缀和"></a>二、二维矩阵前缀和</h1><h2 id="2-1-问题提出"><a href="#2-1-问题提出" class="headerlink" title="2.1 问题提出"></a>2.1 问题提出</h2><p><strong>例题二：</strong><br>输入一个 n 行 m 列的整数矩阵，再输入 q 个询问，每个询问包含四个整数 x1,y1,x2,y2，表示一个子矩阵的左上角坐标和右下角坐标。</p>
<p>对于每个询问输出子矩阵中所有数的和。</p>
<p><strong>输入格式</strong><br>第一行包含三个整数 n，m，q。</p>
<p>接下来 n 行，每行包含 m 个整数，表示整数矩阵。</p>
<p>接下来 q 行，每行包含四个整数 x1,y1,x2,y2，表示一组询问。</p>
<p><strong>输出格式</strong><br>共 q 行，每行输出一个询问的结果。</p>
<p><strong>数据范围</strong><br>1≤n,m≤1000,<br>1≤q≤200000,<br>1≤x1≤x2≤n,<br>1≤y1≤y2≤m,<br>−1000≤矩阵内元素的值≤1000  </p>
<p><strong>输入样例：</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 4 3  </span><br><span class="line">1 7 2 4  </span><br><span class="line">3 6 2 8  </span><br><span class="line">2 1 2 3  </span><br><span class="line">1 1 2 2   </span><br><span class="line">2 1 3 4  </span><br><span class="line">1 3 3 4  </span><br></pre></td></tr></table></figure>
<p><strong>输出样例：</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">17</span><br><span class="line">27</span><br><span class="line">21</span><br></pre></td></tr></table></figure>

<h2 id="2-2-问题思考"><a href="#2-2-问题思考" class="headerlink" title="2.2 问题思考"></a>2.2 问题思考</h2><p>&ensp;&ensp;&ensp;&ensp;要求子矩阵的和，很容易想到类比到一维数组的前缀和，使用相同的方式解决。在使用前缀和解决求子矩阵和的过程中，需要解决两个问题：<br>&ensp;&ensp;&ensp;&ensp;1）如何计算前缀和矩阵；<br>&ensp;&ensp;&ensp;&ensp;2）如何利用前缀和矩阵，计算某一个子矩阵的和。<br>&ensp;&ensp;&ensp;&ensp;通过解决这两个问题，便可以得到一个关于s[x][y]的递推式和答案的递推式，通过这两个递推式便能够以一个较低的复杂度解决相关问题。<br>&ensp;&ensp;&ensp;&ensp;下面依次来解决这两个问题。 </p>
<h2 id="2-3-使用容斥原理解决二维矩阵前缀和问题"><a href="#2-3-使用容斥原理解决二维矩阵前缀和问题" class="headerlink" title="2.3 使用容斥原理解决二维矩阵前缀和问题"></a>2.3 使用容斥原理解决二维矩阵前缀和问题</h2><h3 id="1）计算前缀和矩阵"><a href="#1）计算前缀和矩阵" class="headerlink" title="1）计算前缀和矩阵"></a>1）计算前缀和矩阵</h3><p>&ensp;&ensp;&ensp;&ensp;为了便于观察，首先画出样例给出的前缀和矩阵和原矩阵的示意图,如下：<br><img src="/2021/05/06/%E5%89%8D%E7%BC%80%E5%92%8C/%E5%89%8D%E7%BC%80%E5%92%8C%E7%9F%A9%E9%98%B5%E5%92%8C%E5%8E%9F%E7%9F%A9%E9%98%B5.png" alt="前缀和和原矩阵">  </p>
<p>&ensp;&ensp;&ensp;&ensp;对于这样的问题，想到用容斥原理来计算s[x][y]的值。  </p>
<p>&ensp;&ensp;&ensp;&ensp;容斥原理的简单介绍如下：<br>&ensp;&ensp;&ensp;&ensp;如果被计数的事物有A、B、C三类，那么，A类和B类和C类元素个数总和= A类元素个数+ B类元素个数+C类元素个数—既是A类又是B类的元素个数—既是A类又是C类的元素个数—既是B类又是C类的元素个数+既是A类又是B类而且是C类的元素个数。（A∪B∪C = A+B+C - A∩B - B∩C - C∩A + A∩B∩C）  </p>
<p>&ensp;&ensp;&ensp;&ensp;以求得s[2][3]为例，用s[1][3]加上s[2][2],得到的和的区域范围如下所示：  </p>
<p><img src="/2021/05/06/%E5%89%8D%E7%BC%80%E5%92%8C/%E5%AE%B9%E6%96%A51.png" alt="容斥1"><br>&ensp;&ensp;&ensp;&ensp;黄色标出的区域进行了一次求和，蓝色区域进行了两次求和，为了保证该2x3的范围内每个区域都只进行了一次运算，根据容斥原理，减去这两个区域的交集，即s[1][2]，再加上a[2][3]，便得到了s[2][3]的值。所以s[x][y]的值可由以下递推式得到：<br>&ensp;&ensp;&ensp;&ensp;s[x][y] = s[x - 1][y] + s[x][y - 1] - s[x - 1][y - 1] + a[x][y]  </p>
<h3 id="2）利用前缀和矩阵，计算子矩阵的和"><a href="#2）利用前缀和矩阵，计算子矩阵的和" class="headerlink" title="2）利用前缀和矩阵，计算子矩阵的和"></a>2）利用前缀和矩阵，计算子矩阵的和</h3><p>&ensp;&ensp;&ensp;&ensp;以图中红色所标出的子矩阵为例:<br><img src="/2021/05/06/%E5%89%8D%E7%BC%80%E5%92%8C/%E5%AE%B9%E6%96%A52.png" alt="容斥2"><br>&ensp;&ensp;&ensp;&ensp;首先明确一下，对于任何一个s[x][y]表示的是从(0,0)的点到(x,y)点所有元素的和，所以要解决的问题便是如何在9x9的黄色区域中扣除掉倒“7”字型的区域。<br>&ensp;&ensp;&ensp;&ensp;同样是利用容斥原理，首先扣除上方区域，即s[1][3]，接着扣除左边区域，即s[3][1]，最后加上重复扣除的这两个区域的交集，即s[1][1]。推广开来，对于求(x1,y1)到(x2,y2)的子矩阵的和的递推公式可写为：<br>&ensp;&ensp;&ensp;&ensp;sum = s[x2][y2] - s[x2][y1 - 1] - s[x1 - 1][y2] + s[x1 - 1][y1 - 1]  </p>
<h2 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            s[i][j] = s[i<span class="number">-1</span>][j] + s[i][j<span class="number">-1</span>] - s[i<span class="number">-1</span>][j<span class="number">-1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1, x2, y1, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>&ensp;&ensp;&ensp;&ensp;对于二维矩阵的前缀和，通过容斥原理得到相关递推公式后便可轻松得出。部分范围的复杂度从O(mn)降低到了O(1)。</p>
]]></content>
      <categories>
        <category>practise</category>
      </categories>
      <tags>
        <tag>算法练习</tag>
      </tags>
  </entry>
</search>
